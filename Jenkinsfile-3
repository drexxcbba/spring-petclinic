#!groovy

pipeline {
  agent any
  environment {
     CONTAINER_NAME = "petclinic"
  }
  tools {
     maven '3.6.3'
  }
  stages {
    stage('snyk testing') {
      steps {
        echo 'Testing...'
        snykSecurity(
          snykInstallation: 'snyk-1',
          snykTokenId: 'snyk-token',
          failOnIssues: false,
          failOnError: false
        )
      }
    }
    stage("build & SonarQube analysis") {
       agent any
       steps {
          withSonarQubeEnv('sonarserver') {
             sh 'mvn clean package sonar:sonar \
                   -Dsonar.organization=drexxcbba \
                   -Dsonar.projectKey=drexxcbba_spring-petclinic'
          }
       }
    }
    stage("Quality Gate") {
        steps {
           timeout(time: 1, unit: 'HOURS') {
             waitForQualityGate abortPipeline: true
            }
         }
     }
    stage('Tests, generate jar and Upload to Artifactory') {
      steps {
        sh 'mvn clean install deploy'
      }
    }
    stage('Docker Build') {
      steps {
        sh 'docker build -t drexxcbba/docker-petclinic:latest .'
      }
    }
    stage('Docker Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
          sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
          sh 'docker push drexxcbba/docker-petclinic:latest'
        }
      }
    }
    stage('Delete previous container'){
      steps{
        sh '''
            if [ "$(docker ps -aq -f name=${CONTAINER_NAME})" ]; then
                if [ ! "$(docker ps -aq -f status=exited -f name=${CONTAINER_NAME})" ]; then
                    docker stop ${CONTAINER_NAME}
                fi
                    docker rm ${CONTAINER_NAME}
            fi
        '''
      }
    }
    stage('Docker pull & Docker run') {
      steps{
        script{
          def remote = [:]
          remote.name = 'test'
          remote.host = '192.168.0.10'
          remote.user = 'rodrigo'
          remote.password = 'rodrigo24'
          remote.allowAnyHosts = true
          sshCommand remote: remote, command: "echo rodrigo24 | sudo -S docker pull drexxcbba/docker-petclinic"
          sshCommand remote: remote, command: "echo rodrigo24 | sudo -S docker run -d -p 8080:8080 --name ${CONTAINER_NAME} drexxcbba/docker-petclinic"
        }
      }
    }
  }
} 
