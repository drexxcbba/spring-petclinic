#!groovy

pipeline {
  agent any
  tools {
     maven '3.6.3'
  }
  stages {
    stage('snyk testing') {
      steps {
        echo 'Testing...'
        snykSecurity(
          snykInstallation: 'snyk-1',
          snykTokenId: 'snyk-token',
          failOnIssues: false,
          failOnError: false
        )
      }
    }
    stage("build & SonarQube analysis") {
       agent any
       steps {
          withSonarQubeEnv('sonarserver') {
             sh 'mvn clean package sonar:sonar \
                   -Dsonar.organization=drexxcbba \
                   -Dsonar.projectKey=drexxcbba_spring-petclinic'
          }
       }
    }
    stage("Quality Gate") {
        steps {
           timeout(time: 1, unit: 'HOURS') {
             waitForQualityGate abortPipeline: true
            }
         }
     }
    stage('Tests, generate jar and Upload to Artifactory') {
      steps {
        sh 'mvn clean install deploy'
      }
    }
    stage('Docker Build') {
      steps {
        sh 'docker build -t drexxcbba/docker-petclinic:latest .'
      }
    }
    stage('Testing the container with Snyk') {
      steps{
        snykSecurity( 
          snykInstallation: 'snyk-1', 
          snykTokenId: 'snyk-token', 
          targetFile: 'Dockerfile',
          additionalArguments: '--docker drexxcbba/docker-petclinic',
          failOnIssues: false,
          failOnError: false
        )
      }
    }
    stage('Docker Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
          sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
          sh 'docker push drexxcbba/docker-petclinic:latest'
        }
      }
    }
    stage('Docker pull & Docker run') {
      steps{
        script{
          def remote = [:]
          remote.name = 'test'
          remote.host = '192.168.0.10'
          remote.user = 'rodrigo'
          remote.password = 'rodrigo24'
          remote.allowAnyHosts = true
          def val1 = sshCommand remote: remote, command: "echo rodrigo24 | sudo -S docker ps -aq -f name=petclinic"
          def val2 = sshCommand remote: remote, command: "echo rodrigo24 | sudo -S docker ps -aq -f status=exited -f name=petclinic"
          if(val1){
            if(!val2){
              sshCommand remote: remote, command: "echo rodrigo24 | sudo -S docker stop petclinic"
            }
            sshCommand remote: remote, command: "echo rodrigo24 | sudo -S docker rm petclinic"
          }
          sshCommand remote: remote, command: "echo rodrigo24 | sudo -S docker pull drexxcbba/docker-petclinic"
          sshCommand remote: remote, command: "echo rodrigo24 | sudo -S docker run -d -p 8080:8080 --name petclinic drexxcbba/docker-petclinic"
        }
      }
    }
  }
  post {
        always {
            echo 'Sending Email Notifications'
            script {
                emailext attachLog: true,
                body: "Hello\n\n Pipeline: ${env.JOB_NAME}\nBuild Number: ${env.BUILD_NUMBER}\nStatus: ${currentBuild.currentResult}\n" +
                    "Log file: Attached to this email.\n\n Regards\n\n Jenkins\nCI Server\n\n",
                subject: "Build ${currentBuild.currentResult}: Pipeline ${env.JOB_NAME}", to: 'juanjenkinsmail@gmail.com'
            }
        }
    }
} 
